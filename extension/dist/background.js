const storage={get:e=>chrome.storage.local.get(e),set:(e,t)=>chrome.storage.local.set({[e]:t})},PROTECTED_TARGET={url:"https://quefork.somrit.in",pattern:"",mode:"active",protected:!0};let enabledEndpoints=[],interceptorEnabled=!0,targetUrls=["http://localhost:3000"],targets=[PROTECTED_TARGET],activeTargetIndex=0,targetMode="active",roundRobinIndex=0,requestStats={};function updateExtensionBadge(e){chrome.action.setBadgeText({text:e?"ON":"OFF"}),chrome.action.setBadgeBackgroundColor({color:e?"#4ade80":"#94a3b8"})}function formatBytes(e){if(0===e)return"0 B";const t=Math.floor(Math.log(e)/Math.log(1024));return`${parseFloat((e/Math.pow(1024,t)).toFixed(2))} ${["B","KB","MB","GB"][t]}`}function getTargetForUrl(e){switch(targetMode){case"pattern":const t=targets.find((t=>t.pattern&&new RegExp(t.pattern).test(e)));if(t)return t.url;case"roundrobin":return 0===targets.length?null:(roundRobinIndex=(roundRobinIndex+1)%targets.length,targets[roundRobinIndex].url);default:return targets[activeTargetIndex]?.url||null}}function updateStats(e,t){try{requestStats[e]||(requestStats[e]={count:0,lastAccessed:null,targets:{}}),requestStats[e].count=(requestStats[e].count||0)+1,requestStats[e].lastAccessed=(new Date).toISOString(),requestStats[e].targets||(requestStats[e].targets={}),requestStats[e].targets[t]||(requestStats[e].targets[t]=0),requestStats[e].targets[t]++,chrome.storage.local.set({requestStats:requestStats},(()=>{broadcastMessage({action:"statsUpdated",stats:requestStats})}))}catch(e){console.error("Failed to update stats:",e)}}async function sendMessageToTab(e,t){try{return await chrome.tabs.sendMessage(e,t)}catch(t){return console.debug(`Failed to send message to tab ${e}:`,t),null}}async function broadcastToTabs(e){const t=(await chrome.tabs.query({})).map((t=>sendMessageToTab(t.id,e)));await Promise.allSettled(t)}chrome.storage.local.get(["targetUrls"],(e=>{e.targetUrls&&e.targetUrls.length>0&&(targetUrls=e.targetUrls)})),chrome.storage.local.get(["targets","activeTargetIndex","targetMode","requestStats"],(e=>{e.targets&&(targets=e.targets.some((e=>e.url===PROTECTED_TARGET.url))?e.targets:[PROTECTED_TARGET,...e.targets]),"number"==typeof e.activeTargetIndex&&(activeTargetIndex=e.activeTargetIndex),e.targetMode&&(targetMode=e.targetMode),e.requestStats&&(requestStats=e.requestStats)})),chrome.storage.local.get(["interceptorEnabled"],(e=>{"boolean"==typeof e.interceptorEnabled&&(interceptorEnabled=e.interceptorEnabled),updateExtensionBadge(interceptorEnabled)})),chrome.action.onClicked.addListener((e=>{chrome.sidePanel.open({windowId:e.windowId})})),chrome.sidePanel.setOptions({enabled:!0,path:"sidepanel.html"}),chrome.runtime.onMessage.addListener(((e,t,a)=>"updateEndpoints"===e.action?(enabledEndpoints=e.endpoints,chrome.storage.local.set({enabledEndpoints:enabledEndpoints},(()=>{a({success:!0})})),!0):"detectExtension"===e.action?(a({detected:!0}),!1):"toggleInterceptor"===e.action?(interceptorEnabled=e.enabled,updateExtensionBadge(interceptorEnabled),chrome.runtime.sendMessage({action:"interceptorStateChanged",enabled:interceptorEnabled}).catch(console.debug),chrome.storage.local.set({interceptorEnabled:interceptorEnabled}),broadcastToTabs({type:"INTERCEPTOR_STATE_CHANGED",enabled:interceptorEnabled}),a({success:!0}),!0):"executeRequest"===e.action&&interceptorEnabled?(handleRequest(e,a),!0):"getStats"!==e.action||(a({stats:requestStats}),!1))),chrome.storage.local.get(["enabledEndpoints"],(e=>{e.enabledEndpoints&&(enabledEndpoints=e.enabledEndpoints)})),chrome.storage.local.get(["interceptorEnabled"],(e=>{"boolean"==typeof e.interceptorEnabled&&(interceptorEnabled=e.interceptorEnabled)})),chrome.runtime.onConnect.addListener((e=>{console.debug("New connection established"),e.onDisconnect.addListener((()=>{console.debug("Connection disconnected")})),e.onMessage.addListener((e=>{console.debug("Received message on port:",e)}))})),chrome.tabs.onUpdated.addListener(((e,t,a)=>{"complete"===t.status&&console.debug("Tab ready:",e)}));const connectedPorts=new Set;async function broadcastMessage(e){try{connectedPorts.forEach((t=>{try{t.postMessage(e)}catch(e){console.debug("Failed to send message to port:",e)}}));const t=await chrome.tabs.query({});await Promise.all(t.map((async t=>{try{await chrome.tabs.sendMessage(t.id,e)}catch(e){console.debug(`Tab ${t.id} not ready for messages`)}})))}catch(e){console.debug("Broadcast failed:",e)}}async function handleRequest(e,t){try{console.debug("Processing request:",e);const a=performance.now(),s=await fetch(e.url,{method:e.method||"GET",headers:e.headers,body:"GET"!==e.method?JSON.stringify(e.body):void 0}),n=s.headers.get("content-type"),o=n?.includes("application/json")?await s.json():await s.text(),r=performance.now(),c=Math.round(r-a),d=new Blob([JSON.stringify(o)]).size;updateStats(e.url,e.targetUrl),t({success:!0,response:{status:s.status,statusText:s.statusText,headers:Object.fromEntries(s.headers.entries()),body:o,contentType:n,time:`${c}ms`,size:formatBytes(d)}})}catch(e){console.error("Request failed:",e),t({success:!1,error:e.message||"Request failed"})}}chrome.runtime.onConnect.addListener((e=>{connectedPorts.add(e),e.onDisconnect.addListener((()=>{connectedPorts.delete(e)}))})),chrome.runtime.onInstalled.addListener((()=>{console.debug("Extension installed/updated"),connectedPorts.clear()}));